install.packages("webshot")
webshot::install_phantomjs()
install.packages("webshot")
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::reinstall_tinytex()
library(tinytex)
tinytex::install_tinytex()
tinytex::uninstall_tinytex()
q()
Sys.which('pdflatex')
Sys.which('pdflatex')
tinytex::install_tinytex()
tinytex::install_tinytex(TRUE)
tinytex::uninstall_tinytex()
library(tinytex)
uninstall_tinytex()
install_tinytex()
uninstall_tinytex()
install.packages(c("blscrapeR", "brew", "classInt", "cli", "crayon", "dplyr", "Exact", "gert", "httpuv", "openssl", "ragg", "raster", "rlang", "stringi", "terra", "tidycensus", "tidyr", "tinytex", "tokenizers", "vctrs", "vroom", "webshot", "xfun", "zoo"))
#| label: setup
library(sf)
library(sp)
library(janitor)
library(tidyverse)
library(leaflet)
library(ggplot2)
library(plotly)
library(simplevis)
library(htmlwidgets)
library(stringi)
# CoStar filters: Chesterfield County, Virginia; Multi-family; Construction status: Existing
# Results in 119 records. Some have values missing for Rent Type and Affordable Type - which would require us to remove them from the analysis. Made edits below and removed non-multifamily from the analysis.
p_comp <- read_csv("data/costar_price_comparison.csv") |>
clean_names() |>
select(property_address, property_name, style, owner_name, year_built, number_of_units, avg_asking_unit, rent_type, market_segment,latitude, longitude) |>
filter(number_of_units >3) |>
mutate(style = case_when(
property_address == "2507 Alcott Rd" ~ "Low-Rise",
property_address == "10000 Midlothian Tpke" ~ "Manufactured Home Community",
property_address == "8219 Jefferson Davis Hwy" ~ "Manufactured Home Community",
property_address == "9608 Jefferson Davis Hwy" ~ "Manufactured Home Community",
property_address == "5400 Remuda Dr" ~ "Low Rise",
property_address == "12329-12331 Jefferson Davis Hwy" ~ "Manufactured Home Community",
property_address == "3524 Festival Park Plz" ~ "Low Rise",
property_address == "3524 Festival Park Plz" ~ "Manufactured Home Community",
TRUE ~ style)
) |>
filter(style != "Manufactured Home Community") |>
drop_na(avg_asking_unit)
p_comp_sf <- as.data.frame(p_comp) |>
st_as_sf(coords = c("longitude", "latitude"), crs=4326, remove=FALSE)
comp_by_district <- st_join(p_comp_sf, left = FALSE, districts["MagDistName"]) |>
mutate(MagDistName = str_replace_all(MagDistName, "CLOVERHILL", "Clover Hill"),
MagDistName = str_to_title(MagDistName)) |>
mutate(rent_type = fct_relevel(rent_type,
"Market",
"Market/Affordable",
"Affordable"))
#| label: fig-recent-mf
#| fig-cap: "Recent multifamily developments by magisterial district. Source: CoStar Group, Inc."
# CoStar filter - Chesterfield County, VA; Property type: Multi-Family; Construction status: Existing, Proposed, Under Construction; Year Built Min: 2017
# Included Lat/Long in export
# Might want to consider adding in additional BHC developments into this list of properties. Winchester Forest (160 units), Colbrook (152 units), and Horner Run (49 units). Swift Creek Station should be condensed into a single entry? Different buildings of different stories but same development. I emailed Jessica for information about this development. Would be nice to have that information included. Should probably email Lee about those BHC projects and get addresses and expected year built.
recent <- read_csv("data/costar_market_recent.csv") |>
clean_names()
# Bring in magisterial districts from Chesterfield County Geospace.
districts_geojson <- "https://services3.arcgis.com/TsynfzBSE6sXfoLq/ArcGIS/rest/services/Administrative/FeatureServer/9/query?outFields=*&where=1%3D1&f=geojson"
districts <- read_sf(districts_geojson)
# plot(districts$geometry)
recent <- as.data.frame(recent) |>
st_as_sf(coords = c("longitude", "latitude"), crs=4326, remove=FALSE)
# Spatial join of recent developments to magisterial districts.
newbuilds_by_district <- st_join(recent, left = FALSE, districts["MagDistName"]) |>
mutate(MagDistName = str_to_sentence(MagDistName)) |>
mutate(MagDistName = str_replace_all(MagDistName, "Cloverhill", "Clover Hill"))
newbuild_map <- newbuilds_by_district |>
select("Development" = property_name,
"Address" = property_address,
"Units" = number_of_units,
"District" = MagDistName,
latitude,
longitude)
# Leaflet map of new builds. Would like to mask to just Chesterfield County.
# new_map <- leaf_sf_col(newbuild_map,
#                        col_var = District,
#                        label_var = Development,
#                        col_labels = function(x) x)
#
# saveWidget(new_map, "maps/new_map.html")
knitr::include_url("maps/new_map.html", height = "500px")
# CoStar filters: Chesterfield County, Virginia; Multi-family; Construction status: Existing
# Results in 119 records. Some have values missing for Rent Type and Affordable Type - which would require us to remove them from the analysis. Made edits below and removed non-multifamily from the analysis.
p_comp <- read_csv("data/costar_price_comparison.csv") |>
clean_names() |>
select(property_address, property_name, style, owner_name, year_built, number_of_units, avg_asking_unit, rent_type, market_segment,latitude, longitude) |>
filter(number_of_units >3) |>
mutate(style = case_when(
property_address == "2507 Alcott Rd" ~ "Low-Rise",
property_address == "10000 Midlothian Tpke" ~ "Manufactured Home Community",
property_address == "8219 Jefferson Davis Hwy" ~ "Manufactured Home Community",
property_address == "9608 Jefferson Davis Hwy" ~ "Manufactured Home Community",
property_address == "5400 Remuda Dr" ~ "Low Rise",
property_address == "12329-12331 Jefferson Davis Hwy" ~ "Manufactured Home Community",
property_address == "3524 Festival Park Plz" ~ "Low Rise",
property_address == "3524 Festival Park Plz" ~ "Manufactured Home Community",
TRUE ~ style)
) |>
filter(style != "Manufactured Home Community") |>
drop_na(avg_asking_unit)
p_comp_sf <- as.data.frame(p_comp) |>
st_as_sf(coords = c("longitude", "latitude"), crs=4326, remove=FALSE)
comp_by_district <- st_join(p_comp_sf, left = FALSE, districts["MagDistName"]) |>
mutate(MagDistName = str_replace_all(MagDistName, "CLOVERHILL", "Clover Hill"),
MagDistName = str_to_title(MagDistName)) |>
mutate(rent_type = fct_relevel(rent_type,
"Market",
"Market/Affordable",
"Affordable"))
library(tigris)
library(mapboxapi)
ch_boundary <- counties("VA") |>
filter(NAME == "Chesterfield")
cf_basemap <- layer_static_mapbox(
location = ch_boundary,
style_id = "light-v10",
username = "mapbox"
)
ggplot() +
cf_basemap +
geom_sf(data = comp_by_district,
aes(size = avg_asking_unit,
color = rent_type),
alpha = 0.6,
shape = 16) +
labs(size = "Average asking rent",
color = "Type") +
scale_size(range = c(0, 5),
labels = scales::label_dollar()) +
theme_void()
library(glue)
library(httr)
library(jsonlite)
library(tidyverse)
library(tidycensus)
library(readxl)
library(ggplot2)
library(plotly)
library(sf)
library(formattable)
library(tigris)
library(srvyr)
library(simplevis)
library(mapview)
library(htmltools)
library(htmlwidgets)
library(leaflet)
library(scales)
#| label: fig-race-img
#| #fig-cap: "Race and ethnicity cost burden"
race_cb <- race_clean |>
mutate(estimate = parse_number(estimate)) |>
group_by(year, race, costburden) |>
summarise(estimate = sum(estimate)) |>
mutate(percent = estimate/sum(estimate)) |>
filter(year == 2012 | year == 2018)
race_chas <- read_csv("data/Table9_2012to2018.csv") %>%
filter(fips == 51041) %>%
filter(Line_Type == "Detail") %>%
select(year = Year, estimate = Estimate, moe = MOE, tenure = Tenure, race = `Race/ethnicity`, costburden = `Cost burden`)
race_clean <- race_chas %>%
mutate(across(.fns = ~str_remove_all(.x, "alone, non-Hispanic"))) %>%
mutate(race = case_when(
race == "other (including multiple races, non-Hispanic)" ~ "Another race including multiracial",
race == "American Indian or Alaska Native " ~ "Another race including multiracial",
race == "Pacific Islander " ~ "Another race including multiracial",
race == "White " ~ "White, non-Hispanic",
TRUE ~ race
)) %>%
mutate(costburden = case_when(
costburden == "less than or equal to 30%" ~ "Not cost-burdened",
costburden == "greater than 30% but less than or equal to 50%" ~ "Cost-burdened",
costburden == "greater than 50%" ~ "Cost-burdened",
costburden == "not computed (no/negative income)" ~ "Cost-burdened"
)) |>
mutate(tenure = case_when(
tenure == "Owner occupied" ~ "Homeowner",
tenure == "Renter occupied" ~ "Renter"
))
#| label: fig-race-img
#| #fig-cap: "Race and ethnicity cost burden"
race_cb <- race_clean |>
mutate(estimate = parse_number(estimate)) |>
group_by(year, race, costburden) |>
summarise(estimate = sum(estimate)) |>
mutate(percent = estimate/sum(estimate)) |>
filter(year == 2012 | year == 2018)
#
#
ggplot(race_cb,
aes(x = year, y = percent, fill = costburden)) +
geom_bar(stat = "identity", position = position_stack(reverse = TRUE)) +
facet_wrap(~race) +
scale_fill_manual(values = c("red", "gray"), breaks = c("Cost-burdened", "Not cost-burdened")) +
theme(axis.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
scale_y_continuous(labels = percent_format()) +
labs(title = "Renter cost burden", fill = "Cost burden")
#
# knitr::include_graphics("images/racecb.png")
library(tidyverse)
library(tidycensus)
library(readxl)
library(ggplot2)
library(plotly)
library(simplevis)
library(scales)
library(lubridate)
library(esquisse)
years <- 2010:2020
b25118_vars <- load_variables(2010, "acs5") %>%
filter(str_sub(name, end = 6) %in% "B25118")
b25118_raw <- map_dfr(years, function(yr){
b25118_pull <- get_acs(
geography = "county",
county = "Chesterfield County",
state = "VA",
table = "B25118",
year = yr,
survey = "acs5",
cache_table = TRUE
) %>%
mutate(year = yr)
})
b25118_vars_cleaned <- b25118_vars %>%
separate(label, into = c("est", "total", "tenure", "income"), sep = "!!") %>%
select(variable = name, tenure, income) %>%
mutate(tenure = case_when(
tenure == "Owner occupied" ~ "Homeowner",
tenure == "Renter occupied" ~ "Renter"
)) %>%
mutate(across(.fns = ~replace_na(.x, "All households")))
b25118_data <- b25118_raw %>%
right_join(b25118_vars_cleaned, by = "variable") %>%
select(NAME, year, tenure, income, estimate, moe) %>%
filter(income != "All households") %>%
group_by(year, tenure, income) %>%
summarise(
estimate = sum(estimate),
moe = moe_sum(moe, estimate)
) %>%
mutate(pct = estimate/sum(estimate)) %>%
ungroup() %>%
mutate(cv = ((moe/1.645)/estimate)*100) %>%
mutate(reliability = case_when(
cv < 15 ~ "High reliability",
cv >= 15 & cv <= 30 ~ "Medium reliability",
cv > 30 ~ "Low reliability")
)
